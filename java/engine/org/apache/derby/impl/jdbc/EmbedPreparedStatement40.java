/*
 
   Derby - Class org.apache.derby.impl.jdbc.EmbedPreparedStatement40
 
   Copyright 2005 The Apache Software Foundation or its licensors, as applicable.
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
      http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 
 */

package org.apache.derby.impl.jdbc;

import java.io.InputStream;
import java.io.Reader;
import java.sql.RowId;
import java.sql.NClob;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Types;
import org.apache.derby.iapi.reference.SQLState;
import org.apache.derby.iapi.error.StandardException;

public class EmbedPreparedStatement40 extends  EmbedPreparedStatement30{
    
    public EmbedPreparedStatement40(EmbedConnection conn, String sql, boolean forMetaData,
        int resultSetType, int resultSetConcurrency, int resultSetHoldability,
        int autoGeneratedKeys, int[] columnIndexes, String[] columnNames) throws SQLException {
        super(conn, sql, forMetaData, resultSetType, resultSetConcurrency, resultSetHoldability,
            autoGeneratedKeys, columnIndexes, columnNames);
    }
    
    public void setRowId(int parameterIndex, RowId x) throws SQLException{
        throw Util.notImplemented();
    }
    
    public void setNString(int index, String value) throws SQLException{
        throw Util.notImplemented();
    }
    
    public void setNCharacterStream(int index, Reader value, long length) throws SQLException{
        throw Util.notImplemented();
    }
    
    public void setNClob(int index, NClob value) throws SQLException{
        throw Util.notImplemented();
    }
    
    
    /**
     * Sets the designated parameter to a Reader object.
     *
     * @param parameterIndex index of the first parameter is 1, the second is 2, ...
     * @param reader An object that contains the data to set the parameter value to.
     * @param length the number of characters in the parameter data.
     * @throws SQLException if parameterIndex does not correspond to a parameter
     * marker in the SQL statement, or if the length specified is less than zero.
     *
     */

    
    public void setClob(int parameterIndex, Reader reader, long length)
    throws SQLException{
        int colType;
        synchronized(getConnectionSynchronization()) {
            colType = getParameterJDBCType(parameterIndex);
            if(colType != Types.CLOB)
                throw dataTypeConversion(parameterIndex, "java.sql.Clob");
            
            setCharacterStreamInternal(parameterIndex,reader,length);
        }
    }

    /**
     * Sets the designated parameter to a InputStream object.
     *
     * @param parameterIndex index of the first parameter is 1,
     * the second is 2, ...
     * @param inputStream An object that contains the data to set the parameter
     * value to.
     * @param length the number of bytes in the parameter data.
     * @throws SQLException if parameterIndex does not correspond
     * to a parameter marker in the SQL statement,  if the length specified
     * is less than zero or if the number of bytes in the inputstream does not match
     * the specfied length.
     */

    
    public void setBlob(int parameterIndex, InputStream inputStream, long length)
    throws SQLException{
        int colType;
        synchronized (getConnectionSynchronization()) {
            colType = getParameterJDBCType(parameterIndex);
            if (colType != Types.BLOB)
                throw dataTypeConversion(parameterIndex, "java.sql.Blob");
            
            setBinaryStreamInternal(parameterIndex,inputStream,length);
        }
    }

    public void setNClob(int parameterIndex, Reader reader, long length)
    throws SQLException{
        throw Util.notImplemented();
    }
    
    public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException{
        throw Util.notImplemented();
    }
    
    public void setPoolable(boolean poolable)
    throws SQLException{
        throw Util.notImplemented();
    }
    
    public boolean isPoolable()
    throws SQLException{
        throw Util.notImplemented();
    }
}
